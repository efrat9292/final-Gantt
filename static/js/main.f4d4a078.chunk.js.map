{"version":3,"sources":["Components/Gantt/gantt.js","Components/Gantt/DisplayGantt/displayGantt.js","Components/Header/header.js","App.js","reportWebVitals.js","index.js"],"names":["Gantt","props","dataProcessor","state","background","handleChangeComplete","color","setState","hex","document","documentElement","style","setProperty","initZoom","color_chenge","gantt","ext","zoom","init","levels","name","scale_height","min_column_width","scales","unit","step","format","value","setLevel","this","onDataUpdated","plugins","tooltip","attachEvent","id","task","priority","config","xml_date","tasks","ganttContainer","initGanttDataProcessor","parse","templates","scale_cell_class","date","task_class","start","end","progress","class","gantt_grid_data","task_text","text","gantt_cell","grid_row_class","columnName","column","columns","tree","width","template","cardName","tooltip_date_format","date_to_str","formatFunc","old_width","new_width","message","destructor","setZoom","className","type","onChange","e","func1","target","func2","func3","ref","input","height","Component","DisplayGantt","projectName","console","log","allWorkspace","workspaces","allTheWorkspaces","projects","theCards","theTasks","mone","map","item","index","cards","push","indexOf","currDate","minYear","maxYear","year","start_date","split","concat","parseInt","toString","data","links","source","currentZoom","action","addMessage","withRouter","allProjects","arr","data-toggle","aria-haspopup","aria-expanded","project","backgroundColor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f4d4a078.chunk.js","sourcesContent":["// import React, { Component } from 'react';\r\n// import { gantt } from 'dhtmlx-gantt';\r\n// import './gantt.css';\r\n// import 'dhtmlx-gantt/codebase/dhtmlxgantt.css';\r\n// import '../Gantt/gantt.css';\r\n// export default class Gantt extends Component {\r\n\r\n//     constructor(props) {\r\n//         debugger\r\n//         super(props);\r\n//         this.initZoom();\r\n\r\n//     }\r\n\r\n\r\n\r\n//     dataProcessor = null;\r\n\r\n//     initZoom() {\r\n//         gantt.ext.zoom.init({\r\n//             levels: [\r\n\r\n//                 {\r\n//                     name: 'Days',\r\n//                     scale_height: 60,\r\n//                     min_column_width: 40,\r\n\r\n//                     scales: [\r\n\r\n//                         { unit: \"month\", step: 1, format: \"%F %Y\" },\r\n//                         { unit: \"day\", step: 1, format: \"%j\" }\r\n//                     ]\r\n//                 },\r\n//             ]\r\n//         });\r\n//     }\r\n\r\n//     setZoom(value) {\r\n//         gantt.ext.zoom.setLevel(value);\r\n//     }\r\n\r\n//     initGanttDataProcessor() {\r\n//         const onDataUpdated = this.props.onDataUpdated;\r\n\r\n//     }\r\n\r\n\r\n//     componentDidMount() {\r\n//         gantt.plugins({\r\n//             tooltip: true,\r\n//         });\r\n//         gantt.config.order_branch = true;\r\n//         gantt.config.fit_tasks = true;\r\n//         gantt.setSizes();\r\n//         // gantt.config.autosize = \"xy\";\r\n\r\n\r\n\r\n//         const myVar = [1, 2, 3, 4, 5, 6];\r\n\r\n\r\n//         gantt.attachEvent(\"onBeforeTaskDisplay\", function (id, task) {\r\n//             if (task.priority == \"high\") {\r\n//                 return true;\r\n//             }\r\n//             return false;\r\n//         });\r\n//         gantt.config.xml_date = \"%Y-%m-%d %H:%i\";\r\n//         const { tasks } = this.props;\r\n//         gantt.init(this.ganttContainer);\r\n//         this.initGanttDataProcessor();\r\n//         gantt.parse(tasks);\r\n\r\n//         gantt.templates.scale_cell_class = function (date) {\r\n\r\n//             return \"weekend\";\r\n//         }\r\n//         gantt.templates.task_class = function (start, end, task) {\r\n//             if (task.progress > 0 && task.progress < 1) {\r\n//                 return task.class = \"pinkBorder\";\r\n//             }\r\n//             if (task.progress === 1) {\r\n//                 return task.class = \"greenBorder vv\";\r\n//             }\r\n//             else {\r\n//                 return task.class = \"orangeBorder\";\r\n//             }\r\n//         };\r\n//         gantt.templates.gantt_grid_data = function (start, end) {\r\n//             return \"vv\"\r\n\r\n//         }\r\n//         gantt.templates.task_text = function (start, end, task) {\r\n//             if (task.progress > 1) {\r\n//                 return task.text;\r\n//             }\r\n//             else {\r\n//                 return task.text + \" \" + `<b>${(task.progress) * 100}%</b>`;\r\n//             }\r\n//         };\r\n//         gantt.templates.gantt_cell = function (start, end, task) {\r\n//             return task.text = \"knkl\";\r\n//         }\r\n\r\n//         gantt.templates.grid_row_class = function (columnName, column) {\r\n//             return \"ll\"\r\n\r\n//         };\r\n\r\n\r\n//         gantt.config.columns = [\r\n//             {\r\n//                 name: \"cardName\", tree: true, width: 190, min_width: 150, height: 900, max_width: 300,\r\n//                 resize: true, align: \"center\", template: myFunc\r\n//             },\r\n\r\n//         ];\r\n//         function myFunc(task) {\r\n//             if (task.cardName)\r\n//                 return `<div class='important'><i  class=\"material-icons  \">\r\n//                 arrow_drop_down\r\n//                 </i>${task.cardName}</div>`;\r\n//         };\r\n//         /////////////////////////////////////////////////\r\n//         gantt.templates.tooltip_date_format = function (date) {\r\n//             var formatFunc = gantt.date.date_to_str(\"%Y-%m-%d\");\r\n//             return formatFunc(date);\r\n//         };\r\n\r\n//         gantt.attachEvent(\"onGridResizeEnd\", function (old_width, new_width) {\r\n\r\n//             gantt.message(\"Grid is now <b>\" + new_width + \"</b>px width\");\r\n//             return true;\r\n//         });\r\n\r\n\r\n//     }\r\n\r\n\r\n//     componentWillUnmount() {\r\n//         if (this.dataProcessor) {\r\n//             this.dataProcessor.destructor();\r\n//             this.dataProcessor = null;\r\n//         }\r\n//     }\r\n//     showAlert() {\r\n//         alert(\"bjkbj\")\r\n//     }\r\n\r\n\r\n//     render() {\r\n//         const { zoom } = this.props;\r\n//         this.setZoom(zoom);\r\n\r\n//         return (\r\n//             <>\r\n//                 <center>\r\n//                     <div ref={(input) => { this.ganttContainer = input }}\r\n//                         style={{ width: '100%', height: '100%' }}>\r\n//                     </div>\r\n//                     {/* <span class=\"material-icons-outlined\">\r\n//                         arrow_drop_down\r\n//                     </span> */}\r\n//                     {/* <img src={cardIcon}></img> */}\r\n//                 </center>\r\n//             </>\r\n//         );\r\n//     }\r\n// }\r\n\r\nimport React, { Component } from 'react';\r\nimport { gantt } from 'dhtmlx-gantt';\r\nimport './gantt.css';\r\nimport 'dhtmlx-gantt/codebase/dhtmlxgantt.css';\r\nimport '../Gantt/gantt.css';\r\n\r\n// import Configurator from './Configurator/configurator'\r\n\r\n\r\nexport default class Gantt extends Component {\r\n    constructor(props) {\r\n        debugger\r\n        super(props);\r\n        this.initZoom();\r\n    }\r\n    func1(color_chenge) {\r\n        debugger\r\n        document.documentElement.style.setProperty('--color1', color_chenge)\r\n    }\r\n    func2(color_chenge) {\r\n\r\n        document.documentElement.style.setProperty('--color2', color_chenge)\r\n    }\r\n    func3(color_chenge) {\r\n        document.documentElement.style.setProperty('--color3', color_chenge)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    dataProcessor = null;\r\n\r\n    initZoom() {\r\n        gantt.ext.zoom.init({\r\n            levels: [\r\n\r\n                {\r\n                    name: 'Days',\r\n                    scale_height: 60,\r\n                    min_column_width: 40,\r\n\r\n                    scales: [\r\n\r\n                        { unit: \"month\", step: 1, format: \"%F %Y\" },\r\n                        { unit: \"day\", step: 1, format: \"%j\" }\r\n                    ]\r\n                },\r\n            ]\r\n        });\r\n    }\r\n\r\n    setZoom(value) {\r\n        gantt.ext.zoom.setLevel(value);\r\n    }\r\n    initGanttDataProcessor() {\r\n        const onDataUpdated = this.props.onDataUpdated;\r\n\r\n    }\r\n    componentDidMount() {\r\n        gantt.plugins({\r\n            tooltip: true,\r\n        });\r\n        gantt.attachEvent(\"onBeforeTaskDisplay\", function (id, task) {\r\n            if (task.priority == \"high\") {\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        gantt.config.xml_date = \"%Y-%m-%d %H:%i\";\r\n        const { tasks } = this.props;\r\n        gantt.init(this.ganttContainer);\r\n        this.initGanttDataProcessor();\r\n        gantt.parse(tasks);\r\n\r\n        gantt.templates.scale_cell_class = function (date) {\r\n\r\n            return \"weekend\";\r\n        }\r\n        gantt.templates.task_class = function (start, end, task) {\r\n\r\n            if (task.progress > 0 && task.progress < 1) {\r\n                return task.class = \"pinkBorder\";\r\n            }\r\n            if (task.progress === 1) {\r\n                return task.class = \"greenBorder vv\";\r\n            }\r\n            else {\r\n                return task.class = \"orangeBorder\";\r\n            }\r\n        };\r\n        gantt.templates.gantt_grid_data = function (start, end) {\r\n            return \"vv\"\r\n\r\n        }\r\n        gantt.templates.task_text = function (start, end, task) {\r\n            if (task.progress > 1) {\r\n                return task.text;\r\n            }\r\n            else {\r\n                return task.text + \" \" + `<b>${(task.progress) * 100}%</b>`;\r\n            }\r\n        };\r\n        gantt.templates.gantt_cell = function (start, end, task) {\r\n            return task.text = \"knkl\";\r\n        }\r\n\r\n        gantt.templates.grid_row_class = function (columnName, column) {\r\n            return \"ll\"\r\n\r\n        };\r\n\r\n        // gantt.attachEvent(\"onBeforeTaskDisplay\", function(id, task){\r\n        //     if (task.priority == \"high\"){\r\n        //         return true;\r\n        //     }\r\n        //     return false;\r\n        // });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        gantt.config.columns = [\r\n            { tree: false, width: 150, template: myFunc }\r\n\r\n\r\n        ];\r\n        function myFunc(task) {\r\n            if (task.cardName)\r\n                return `<div class='important'><i class=\"material-icons\">\r\n   arrow_drop_down\r\n\r\n   </i>${task.cardName}</div>`;\r\n            //return task.text+\" (\"+task.users+\")\";\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        /////////////////////////////////////////////////\r\n        // gantt.templates = function(columnName, column){\r\n        //    alert(\"hjjhj\")\r\n        //   };\r\n        // gantt.attachEvent(\"onTaskDrag\", function(id, mode, task, original){\r\n        //     gantt.templates.task_class  = function(start, end, task){\r\n        //         // return task.class = \"txtAlign\"\r\n        //     };  \r\n        // });\r\n        // gantt.attachEvent(\"onBeforeTaskDrag\", function(id, mode, e){\r\n        //     if(gantt.getGlobalTaskIndex(id)%2==1){\r\n        //         alert(\"jhjhj\")      //denies dragging if the global task index is odd\r\n        //     }\r\n        //     return true;           //allows dragging if the global task index is even\r\n        // });\r\n        // gantt.attachEvent(\"onAfterTaskDrag\", function(id, mode, e, task){\r\n\r\n        //     alert(task)\r\n        //     //any custom logic here\r\n        // });\r\n\r\n        // gantt.templates.gantt_task_drag=function(start,end,task){\r\n        //     alert(\"knknk\")\r\n        // }\r\n        gantt.templates.tooltip_date_format = function (date) {\r\n            var formatFunc = gantt.date.date_to_str(\"%Y-%m-%d\");\r\n            return formatFunc(date);\r\n        };\r\n\r\n        gantt.attachEvent(\"onGridResizeEnd\", function (old_width, new_width) {\r\n\r\n            gantt.message(\"Grid is now <b>\" + new_width + \"</b>px width\");\r\n            return true;\r\n        });\r\n\r\n        // gantt.config.columns = [\r\n        //     { name: \"text\", tree: true, width: \"*\", resize: true },//-> 'resize' active\r\n        //     { name: \"start_date\", resize: true, min_width: 100 },//-> 'resize' limited by 'min_width'\r\n        //     { name: \"duration\", align: \"center\" },              //-> no resize\r\n        //     { name: \"add\", width: \"44\" }\r\n        // ];\r\n\r\n        // gantt.config.layout = {\r\n        //     css: \"gantt_container\",\r\n        //      rows: [\r\n        //      {\r\n        //       cols: [\r\n        //        {view: \"grid\", id: \"grid\", scrollX: \"scrollHor\", scrollY: \"scrollVer\"},\r\n        //        {view: \"timeline\", id: \"timeline\", scrollX: \"scrollHor\", scrollY: \"scrollVer\"},\r\n        //        {view: \"scrollbar\", id: \"scrollVer\"}\r\n        //       ]\r\n        //      },\r\n        //      {view: \"scrollbar\", id: \"scrollHor\"}\r\n        //     ]\r\n        //    };\r\n\r\n    }\r\n    state = {\r\n        background: '#fff',\r\n    };\r\n    handleChangeComplete = (color) => {\r\n\r\n        this.setState({ background: color.hex });\r\n        document.documentElement.style.setProperty('--color1', color)\r\n    };\r\n\r\n\r\n\r\n    componentWillUnmount() {\r\n\r\n        if (this.dataProcessor) {\r\n            this.dataProcessor.destructor();\r\n            this.dataProcessor = null;\r\n        }\r\n    }\r\n    showAlert() {\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { zoom } = this.props;\r\n        this.setZoom(zoom);\r\n\r\n\r\n\r\n\r\n\r\n\r\n        return (\r\n            <>\r\n                {/* <div className=\"configurator\"> */}\r\n                <div className=\"row \">\r\n\r\n                    <div className=\"col-2\"></div>\r\n                    <div className=\"text_chenge col-9\" >change the progress color: </div>\r\n                </div>\r\n\r\n                <div className=\"row \">\r\n                    <div className=\"col-2\"></div>\r\n                    <div className=\"col-8\"><div className=\"text1\">task in process:\r\n                        {/* <HuePicker color={this.state.background} */}\r\n                        {/* // onChangeComplete={this.handleChangeComplete} /> */}\r\n                        <input type=\"color\" onChange={e => this.func1(e.target.value)}></input>\r\n                    </div></div>\r\n                </div>\r\n                <div className=\"row mt-2\">\r\n                    <div className=\"col-2\"></div>\r\n                    <div className=\"col-10\"><div className=\"text1\"> Task accomplished: <input type=\"color\" onChange={e => this.func2(e.target.value)}></input></div></div>\r\n                </div>\r\n                <div className=\"row mt-2\">\r\n                    <div className=\"col-2\"></div>\r\n                    <div className=\"col-8\"><div className=\"text1\">Task not started: <input type=\"color\" onChange={e => this.func3(e.target.value)}></input></div></div>\r\n\r\n                </div>\r\n                {/* </div> */}\r\n                <center>\r\n                    <div ref={(input) => { this.ganttContainer = input }}\r\n                        style={{ width: '100%', height: '100%' }}>\r\n                    </div>\r\n                </center>\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n","\r\nimport React, { Component } from 'react';\r\nimport Gantt from '../gantt';\r\nimport './displayGantt.css'\r\nimport workspaces from '../workspace.json'\r\nexport default function DisplayGantt() {\r\n\r\n    const projectName = \"project1\";\r\n    console.log(projectName);\r\n    const allWorkspace = { workspaces };\r\n    console.log(allWorkspace);\r\n    const allTheWorkspaces = allWorkspace.workspaces.workspaces.projects;\r\n\r\n\r\n    const theCards = []\r\n    const theTasks = []\r\n    const mone = []\r\n\r\n    allTheWorkspaces.map((item, index) => {\r\n        {\r\n            item.name === projectName ? item.cards.map((item, index) => {\r\n                {\r\n                    theCards.push(item);\r\n                    console.log(\"pppppppp\", item)\r\n\r\n                }\r\n\r\n            })\r\n                : console.log(\"bed\", item.cards);\r\n        }\r\n    })\r\n    console.log(\"the cards\", theCards);\r\n\r\n    {\r\n        theCards.map((item, index) => {\r\n\r\n            let indexOf = 0;\r\n\r\n            item.tasks.map((item) => {\r\n                indexOf++;\r\n\r\n\r\n                theTasks.push(item)\r\n\r\n\r\n            })\r\n\r\n            mone.push(indexOf)\r\n\r\n        })\r\n\r\n    }\r\n    console.log(\"mone\", mone);\r\n    let minYear = \"3000-01-01\";\r\n    let maxYear = \"1000-01-01\";\r\n    let currDate;\r\n\r\n\r\n\r\n    {\r\n        theTasks.map((item) => {\r\n            let year = item.start_date.split('-')[0];\r\n            if (year > maxYear.split('-')[0]) {\r\n\r\n                currDate = year\r\n                console.log(\"papapap\", year);\r\n                year = year.concat('-01-01')\r\n                console.log(\"tttt\", year);\r\n                maxYear = year;\r\n            } else if (year < minYear) {\r\n                minYear = year\r\n            }\r\n            else {\r\n                return\r\n            }\r\n\r\n\r\n        })\r\n\r\n\r\n    }\r\n    currDate = parseInt(currDate)\r\n    currDate = currDate + 2\r\n    currDate = currDate.toString();\r\n\r\n    currDate = currDate.concat('-01-01')\r\n\r\n    maxYear = currDate;\r\n    console.log();\r\n    theTasks.push(\r\n\r\n        {\r\n            \"id\": 2985730,\r\n            \"text\": \"first\",\r\n            \"start_date\": currDate,\r\n            \"duration\": 3,\r\n            \"progress\": 0.6,\r\n        })\r\n\r\n\r\n    console.log(\"the tasks\", theTasks);\r\n\r\n    const state = {\r\n        currentZoom: 'Days',\r\n        messages: []\r\n    };\r\n    const data = {\r\n        data: theTasks,\r\n        links: [\r\n            { id: 1, source: 7, target: 7, type: '0' }\r\n        ]\r\n    };\r\n\r\n    const logDataUpdate = (type, action, item, id) => {\r\n        let text = item && item.text ? ` (${item.text})` : '';\r\n        let message = `${type} ${action}: ${id} ${text}`;\r\n        if (type === 'link' && action !== 'delete') {\r\n            message += ` ( source: ${item.source}, target: ${item.target} )`;\r\n        }\r\n        this.addMessage(message);\r\n    }\r\n\r\n    const handleZoomChange = (zoom) => {\r\n        this.setState({\r\n            currentZoom: zoom\r\n        });\r\n    }\r\n\r\n\r\n    const { currentZoom, messages } = state;\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Gantt\r\n                    tasks={data}\r\n                    zoom={currentZoom}\r\n                    onDataUpdated={logDataUpdate}\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n\r\n\r\n\r\n}\r\n","import { react, useEffect, useState } from 'react';\r\nimport './header.css'\r\nimport workspaces from '../Gantt/workspace.json'\r\n// import Gantt from '../Gantt/gantt'\r\n// import DisplayGantt from '../Gantt/displayGantt'\r\nimport { Route, Router, withRouter } from \"react-router-dom\";\r\nimport Switch from 'react-bootstrap/esm/Switch';\r\n// import useState from 'react-dom'\r\nfunction Header(props) {\r\n\r\n  // const [projectName, setProjectName] = useState(true);\r\n  const allWorkspace = { workspaces };\r\n  const allProjects = allWorkspace.workspaces.workspaces.projects;\r\n  // const routeToGantt = (projectName) => {\r\n  // props.history.push(`/Gantt/${projectName}`);\r\n  // }\r\n  const l = \"myName\";\r\n  // const colorCircle=allProjects.workspaces.workspaces.projects\r\n  console.log(allProjects);\r\n  const arr = []\r\n  allProjects.map((item, index) => {\r\n    arr[index] = item.name;\r\n  })\r\n  console.log(arr);\r\n\r\n  function goToGantt() {\r\n    // <Redirect to={'/Gantt'}></Redirect>\r\n    props.history.push('/Gantt/');\r\n    // history.push('/Gantt')\r\n    alert(\"camr\")\r\n  }\r\n\r\n  //const numbers = props.numbers;\r\n  // const listItemsProjectName = arr.map((number) =>\r\n  //   // <li>{number}</li>\r\n  //   <li>{number}</li>\r\n\r\n  // )\r\n\r\n\r\n\r\n\r\n  // function greetUser(e) {\r\n\r\n\r\n  // }\r\n\r\n  // const  handleClick = value => () => {\r\n\r\n\r\n  //    // history.push(`/Gantt/${value.name}`) ;\r\n  //     return \r\n  //     // <Redirect to='/Gantt/' />\r\n  //     <Redirect to={\"/Gantt/\" + value.name} />\r\n  //   };\r\n\r\n  return (\r\n    <>\r\n\r\n      <div className=\"container \">\r\n        <div className=\"row  header2\">\r\n\r\n        </div>\r\n        <div className=\"row header1\">\r\n          <div className=\"col-3\">\r\n            <div className=\"btn-group\">\r\n\r\n              <div className=\"dropBtn dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                Projects\r\n                   </div>\r\n\r\n              <div className=\"   dropContainer dropdown-menu dropdown-menu-right container \">\r\n\r\n                <div className=\"row\">\r\n                  <div className=\"col\">\r\n\r\n                  </div>\r\n\r\n                  {allProjects.map((project) =>\r\n\r\n                    <div className=\" row mt-2\"\r\n\r\n                    >\r\n                      <div className=\"col-1  itemCircle ml-3\" style={{ backgroundColor: project.color ? project.color : \"blue\" }}>   {project.name[0]} </div>\r\n                      <div className=\"col-1 \">\r\n\r\n\r\n                        {/* <Router>\r\n                          <nav >\r\n                            <Switch>\r\n                              <Route path=\"/Gantt/:projectName\">\r\n                                <Gantt />\r\n                              </Route>\r\n                            </Switch> */}\r\n\r\n                        <button\r\n                          // onClick={() => routeToGantt(project.name)}\r\n                          className=\" dropdown-item dropItem \"\r\n\r\n                        >\r\n\r\n                          {/* <Link to={`/Gantt/${project.name}`}> */}\r\n                          {project.name}\r\n                          {/* </Link> */}\r\n                        </button>\r\n\r\n\r\n\r\n\r\n                        {/* </nav>\r\n                        </Router> */}\r\n                      </div>\r\n                    </div>\r\n\r\n\r\n\r\n                  )\r\n\r\n\r\n                  }\r\n\r\n\r\n\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n              </div>\r\n            </div>\r\n\r\n          </div> <div className=\"col-3\">\r\n\r\n          </div>\r\n          <div className=\"col-3 gantt\">\r\n            Gantt\r\n    </div>\r\n        </div>\r\n      </div>\r\n\r\n\r\n    </>\r\n\r\n\r\n\r\n\r\n  );\r\n}\r\nexport default withRouter(Header)","\nimport React, { Component } from 'react';\nimport Gantt from './Components/Gantt/gantt';\nimport './App.css';\nimport DisplayGantt from './Components/Gantt/DisplayGantt/displayGantt';\nimport Routing from './Components/routing/routing';\n\n\nexport default function App() {\n\n  return (\n    <div>\n      <br></br>\n\n      <DisplayGantt></DisplayGantt>\n\n    </div>\n  );\n\n}\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}